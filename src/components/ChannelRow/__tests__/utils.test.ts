import { getHiddenText } from '../utils';

describe('ChannelRow', () => {
  describe('getHiddenText', () => {
    const testCases = [
      {
        text: 'Давно выяснено, что при оценке дизайна и композиции читаемый текст мешает сосредоточиться. Lorem Ipsum используют потому, что тот обеспечивает болеет ли менее стандартное заполнение шаблона, а также реальное распределение букв и пробелов в абзацах, которое не получается при простой дубликации "Здесь ваш текст.. Здесь ваш текст.. Здесь ваш текст.." ',
        expected:
          ' ли менее стандартное заполнение шаблона, а также реальное распределение букв и пробелов в абзацах, которое не получается при простой дубликации "Здесь ваш текст.. Здесь ваш текст.. Здесь ваш текст.." ',
        maxlenght: 150,
      },
      {
        text: 'Давно выяснено, что при оценке дизайна и композиции читаемый текст мешает сосредоточиться. Lorem Ipsum используют потому, что тот обеспечивает более ли менее стандартное заполнение шаблона, а также реальное распределение букв и пробелов в абзацах, которое не получается при простой дубликации "Здесь ваш текст.. Здесь ваш текст.. Здесь ваш текст.." ',
        expected:
          'и менее стандартное заполнение шаблона, а также реальное распределение букв и пробелов в абзацах, которое не получается при простой дубликации "Здесь ваш текст.. Здесь ваш текст.. Здесь ваш текст.." ',
        maxlenght: 150,
      },
    ];

    testCases.map((test, index) => {
      describe(`${index}`, () => {
        it('Should return hidden text started with space, if visible text is ends with space', () => {
          const actual = getHiddenText(test.text, test.maxlenght);

          expect(actual).toBe(test.expected);
        });
      });
    });
  });
});
