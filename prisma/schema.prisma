generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id                     String         @id @default(cuid())
  name                   String
  description            String?
  avatar                 String?
  url                    String         @unique
  isArchived             Boolean
  isBlogger              Boolean
  subscribers            Int?
  er                     Int?
  malePercent            Int?
  views                  Int?
  cpv                    Int?
  postPrice              Float?
  categoryId             String?
  lastUpdateDateTime     DateTime       @default(now()) @updatedAt
  cartId                 String?
  lastUpdateFromTelegram DateTime?
  postsLast30days        Int?
  viewsLast30days        Int?
  campaignId             String?
  Campaign               Campaign?      @relation(fields: [campaignId], references: [id])
  Cart                   Cart?          @relation(fields: [cartId], references: [id])
  category               Category?      @relation(fields: [categoryId], references: [id])
  formats                Format[]
  ChannelOwner           ChannelOwner[]
}

model Category {
  id       String    @id @default(cuid())
  name     String
  channels Channel[]
}

model Format {
  id       String    @id @default(cuid())
  name     String
  channels Channel[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  emailVerified       DateTime?
  image               String?
  tgId                String?          @unique
  userGroupSystemName String           @default("USERS")
  userGroups          UserGroup        @relation(fields: [userGroupSystemName], references: [systemName])
  accounts            Account[]
  Campaign            Campaign[]
  Cart                Cart?
  Notification        Notification[]
  sessions            Session[]
  TgBotAuthToken      TgBotAuthToken[]
  ChannelOwner        ChannelOwner[]
}

model UserGroup {
  id         Int     @id @default(autoincrement())
  name       String?
  systemName String  @unique
  user       User[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BackgroundTask {
  id     Int        @id @default(autoincrement())
  name   String     @unique
  status TaskStatus @default(STOPPED)
}

model Cart {
  id        String    @id @default(cuid())
  userId    String    @unique @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  cartItems Channel[]
}

model Campaign {
  id        String         @id @default(cuid())
  userId    String         @map("user_id")
  status    CampaignStatus @default(DRAFT)
  postImage String?
  postText  String?
  user      User           @relation(fields: [userId], references: [id])
  channels  Channel[]
}

model Notification {
  id              String             @id @default(cuid())
  text            String
  userTgId        String             @map("user_tg_id")
  status          NotificationStatus
  sendingDateTime DateTime           @default(now())
  user            User               @relation(fields: [userTgId], references: [tgId])
}

model TgBotAuthToken {
  token    String @unique
  userTgId String @map("user_tg_id")
  user     User   @relation(fields: [userTgId], references: [tgId])
}

model ChannelOwner {
  ownerId   String
  channelId String
  channel   Channel @relation(fields: [channelId], references: [id])
  owner     User    @relation(fields: [ownerId], references: [id])

  @@id([ownerId, channelId])
}

enum TaskStatus {
  STARTED
  STOPPED
}

enum CampaignStatus {
  DRAFT
  READY_FOR_MODERATION
  MODERATION_APPROVED
  MODERATION_DENIED
  IN_PROGRESS
  DONE
  ARCHIVED
}

enum NotificationStatus {
  SENT
  ERROR
}
